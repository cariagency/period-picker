!function(n){n.fn.periodPickerDefaults={min:!1,max:!1,year:!1,active:!1,pick:function(t,e,a){console.log(t)},popover:{placement:"bottom"},yearName:"Whole year",semesterName:"S",quarterName:"Q",btnClass:"btn btn-primary",activeClass:"btn btn-success",prevTemplate:"&lt;&lt;",nextTemplate:"&gt;&gt;",titleTemplate:'<div class="inner">            <a href="#" class="period-picker-prev">%P</a>            <div class="year"></div>            <a href="#" class="period-picker-next">%N</a>        </div>',bodyTemplate:'<div class="inner">            <div class="year">                <div>                    <button class="%C">%Y</button>                </div>            </div>            <div class="semester">                <div>                    <button class="%C" data-period="1">%S1</button>                </div>                <div>                    <button class="%C" data-period="2">%S2</button>                </div>            </div>            <div class="quarter">                <div>                    <button class="%C" data-period="1">%Q1</button>                </div>                <div>                    <button class="%C" data-period="2">%Q2</button>                </div>                <div>                    <button class="%C" data-period="3">%Q3</button>                </div>                <div>                    <button class="%C" data-period="4">%Q4</button>                </div>            </div>            <div class="month">                <div>                    <button class="%C" data-period="1">01</button>                </div>                <div>                    <button class="%C" data-period="2">02</button>                </div>                <div>                    <button class="%C" data-period="3">03</button>                </div>                <div>                    <button class="%C" data-period="4">04</button>                </div>                <div>                    <button class="%C" data-period="5">05</button>                </div>                <div>                    <button class="%C" data-period="6">06</button>                </div>                <div>                    <button class="%C" data-period="7">07</button>                </div>                <div>                    <button class="%C" data-period="8">08</button>                </div>                <div>                    <button class="%C" data-period="9">09</button>                </div>                <div>                    <button class="%C" data-period="10">10</button>                </div>                <div>                    <button class="%C" data-period="11">11</button>                </div>                <div>                    <button class="%C" data-period="12">12</button>                </div>            </div>        </div>'};var i=/^(\d{4})(\/(0[1-9]|1[1-2]|Q[1-4]|S[1-2]))?$/,o=function(a,t){var e=a.data("current"),r=e.format("YYYY");n(".popover-header .year",t).text(e.format("YYYY")),n(".popover-body > .inner .year button",t).data("value",{type:"year",year:r,start:e.clone(),end:e.clone().endOf("year")}).data("slug",r),n(".popover-body > .inner .semester button",t).each(function(){var t=parseInt(n(this).data("period"));n(this).data("value",{type:"semester",semester:t,year:r,start:e.clone().quarter(1===t?1:3).startOf("quarter"),end:e.clone().quarter(1===t?2:4).endOf("quarter")}).data("slug",r+"/S"+t)}),n(".popover-body > .inner .quarter button",t).each(function(){var t=parseInt(n(this).data("period"));n(this).data("value",{type:"quarter",quarter:t,year:r,start:e.clone().quarter(t).startOf("quarter"),end:e.clone().quarter(t).endOf("quarter")}).data("slug",r+"/Q"+t)}),n(".popover-body > .inner .month button",t).each(function(){var t=parseInt(n(this).data("period"));n(this).data("value",{type:"month",month:t,year:r,start:e.clone().month(t-1).startOf("month"),end:e.clone().month(t-1).endOf("month")}).data("slug",r+"/"+("0"+t).substr(-2))});var i=a.data("min"),o=a.data("max");n(".popover-body > .inner button",t).each(function(){var t=n(this).data("value");n(this).prop("disabled",i&&t.start.isBefore(i)||o&&t.end.isAfter(o));var e=n(this).data("slug")===a.data("active");n(this).attr("class",e?a.settings.activeClass:a.settings.btnClass)})};n.fn.periodPicker=function(t){var a=function(t){var e=n.extend({},n.fn.periodPickerDefaults,t);if(e.year){if(!moment(e.year,"YYYY",!0).isValid())return console.error("[Period picker] Invalid value for year option : "+e.year),!1;e.year=moment(e.year,"YYYY").startOf("year")}else e.year=moment().startOf("year");if(e.min){if(!moment(e.min,"YYYY/MM",!0).isValid())return console.error("[Period picker] Invalid value for min option : "+e.min),!1;e.min=moment(e.min,"YYYY/MM").startOf("month")}if(e.max){if(!moment(e.max,"YYYY/MM",!0).isValid())return console.error("[Period picker] Invalid value for max option : "+e.max),!1;e.max=moment(e.max,"YYYY/MM").endOf("month")}return e.active&&!i.test(e.active)?(console.error("[Period picker] Invalid value for active option : "+e.active),!1):e}(t);if(a){var r=n.extend({},a.popover,{title:a.titleTemplate.replace("%P",a.prevTemplate).replace("%N",a.nextTemplate),content:a.bodyTemplate.replace("%Y",a.yearName).replace(/%S/g,a.semesterName).replace(/%Q/g,a.quarterName).replace(/%C/g,a.btnClass),html:!0});return this.each(function(){var t,e=function(t,e){if(t.settings=e,t.data("year")){if(!moment(t.data("year"),"YYYY",!0).isValid())return console.error("[Period picker] Invalid value for data-year option : "+t.data("year")),!1;t.data("year",moment(t.data("year"),"YYYY").startOf("year"))}else t.data("year",e.year.clone());if(t.data("min")){if(!moment(t.data("min"),"YYYY/MM",!0).isValid())return console.error("[Period picker] Invalid value for data-min option : "+t.data("min")),!1;t.data("min",moment(t.data("min"),"YYYY/MM").startOf("month"))}else t.data("min",!!e.min&&e.min.clone());if(t.data("max")){if(!moment(t.data("max"),"YYYY/MM",!0).isValid())return console.error("[Period picker] Invalid value for data-max option : "+t.data("max")),!1;t.data("max",moment(t.data("max"),"YYYY/MM").endOf("month"))}else t.data("max",!!e.max&&e.max.clone());if(t.data("active")){if(!i.test(t.data("active")))return console.error("[Period picker] Invalid value for active option : "+t.data("active")),!1}else t.data("active",e.active);return t}(n(this),a);e.addClass("period-picker-button").attr("tabindex",0).popover(r).on("show.bs.popover",function(){n(".period-picker-button.in").popover("hide"),n(this).addClass("in"),e.data("current",e.data("year").clone()),t=n(n(this).data("bs.popover").tip).addClass("period-picker-popover").data("picker",e)}).on("shown.bs.popover",function(){o(e,t),n(".popover-body > .inner button",t).click(function(){!0!==a.pick(n(this).data("value"),e,t)&&e.popover("hide")})}).on("hide.bs.popover",function(){n(this).removeClass("in")})})}},n(document).on("click",function(t){n(t.target).hasClass("period-picker-button")||0!==n(t.target).parents(".period-picker-button").length||0!==n(t.target).parents(".popover").length||n(".period-picker-button").popover("hide")}),n(document).on("click",".period-picker-prev, .period-picker-next",function(t){if(t.preventDefault(),!n(this).prop("disabled")){var e=n(this).parents(".period-picker-popover"),a=e.data("picker");n(this).is(".period-picker-prev")?a.data("current").subtract(1,"y"):a.data("current").add(1,"y"),o(a,e)}})}(jQuery);